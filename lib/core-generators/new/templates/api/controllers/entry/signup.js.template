module.exports = {


  friendlyName: 'Signup',


  description: 'Sign up for a new user account.',


  extendedDescription:
  'This creates a new user record in the database _and_ causes the requesting user agent '+
  'to become logged in by modifying its [session](https://sailsjs.com/documentation/concepts/sessions).',


  inputs: {

    emailAddress: {
      required: true,
      type: 'string',
      description: 'The email address for the new account, e.g. "m@example.com".',
      extendedDescription: 'Must be a valid email address.',
    },

    password: {
      required: true,
      type: 'string',
      description: 'The unencrypted password to use for the new account, e.g. "passwordlol".',
      extendedDescription:
      'See `api/models/User.js` for details about password validation.\n'+
      '\n'+
      '> To summarize: Password must be at least 7 characters, and max 72 characters.  Anything goes.',
    },

    fullName:  {
      required: true,
      type: 'string',
      description: 'The user\'s full name.',
    }

  },


  exits: {

    invalid: {
      responseType: 'badRequest',
      description: 'The provided fullName, password and/or email address are invalid.',
      extendedDescription: 'If this request was sent from a graphical user interface, the request '+
      'parameters should have been validated/coerced _before_ they were sent.'
    },

    emailAlreadyInUse: {
      statusCode: 409,
      description: 'The provided email address is already in use.',
    },

  },


  fn: async function (inputs, exits) {

    // Import dependencies
    var Stripe = require('machinepack-stripe');

    // Create a "Customer" for this user in the Stripe API.
    // (assuming billing feaures are enabled)
    var stripeCustomer;
    if (sails.config.custom.enableBillingFeatures) {
      stripeCustomer = await Stripe.createCustomer({
        description: inputs.fullName,
        email: inputs.emailAddress
      });
    }//ﬁ


    // Come up with a pseudorandom, probabilistically-unique token for use
    // in our initial account verification email.
    var emailProofToken = await sails.stdlib('strings').random({ style: 'url-friendly' });


    // Build up data for the new user record and save it to the database.
    // (Also use `fetch` to retrieve the new ID so that we can use it below.)
    var newUserRecord = await User.create({
      emailAddress: inputs.emailAddress.toLowerCase(),
      password: await sails.stdlib('passwords').hashPassword({ password: inputs.password }),
      fullName: inputs.fullName,
      emailProofToken: sails.config.custom.enableEmailFeatures ? emailProofToken : undefined,
      emailProofTokenExpiresAt: sails.config.custom.enableEmailFeatures ? (Date.now() + sails.config.custom.emailProofTokenTTL) : undefined,
      stripeCustomerId: sails.config.custom.enableBillingFeatures ? stripeCustomer.id : undefined,
      emailStatus: sails.config.custom.enableEmailFeatures ? 'pending' : undefined,
      tosAcceptedByIp: this.req.ip// (https://sailsjs.com/documentation/reference/request-req/req-ip)
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      // ^Note that, for some use cases, this needs to be tracked to meet Stripe's KYC requirements.
      // For example:
      // https://stripe.com/docs/connect/updating-accounts#referencing-the-agreement
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    })
    .intercept('E_UNIQUE', ()=>'emailAlreadyInUse')
    .intercept({name: 'UsageError'}, (err)=>({invalid: err}))
    .fetch();


    // --•
    // IWMIH (if we made it here), the user record was successfully created.

    // Store the user's new id in their session.
    this.req.session.userId = newUserRecord.id;

    if (sails.config.custom.enableEmailFeatures) {
      // Send "confirm account" email
      await sails.helpers.sendTemplateEmail({
        subject: 'Please confirm your account',
        template: 'email-verify-account',
        templateData: {
          name: inputs.fullName,
          emailProofToken: emailProofToken
        },
        to: inputs.emailAddress.toLowerCase(),
      });
    }

    // Since everything went ok, call send the success response.
    return exits.success();

  }

};
