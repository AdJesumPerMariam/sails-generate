module.exports = {


  friendlyName: 'Update profile',


  description: 'Update the profile for the logged-in user.',


  inputs: {

    fullName: {
      type: 'string'
    },

    emailAddress: {
      type: 'string'
    },

  },


  exits: {

    emailAlreadyInUse: {
      statusCode: 409,
      description: 'The provided email address is already in use.',
    },

  },


  fn: async function (inputs, exits) {

    var newEmailAddress = inputs.emailAddress.toLowerCase();

    // Determine if this request wants to change the current user's email address,
    // revert her pending email address change, or if the email address won't be
    // affected.
    var desiredEffectReEmail;// ('change', 'cancelPendingChange', or '')
    if (
      newEmailAddress === undefined ||
      (this.req.me.emailStatus !== 'changeRequested' && newEmailAddress === this.req.me.emailAddress)
    ) {
      desiredEffectReEmail = '';
    } else if (this.req.me.emailStatus === 'changeRequested' && newEmailAddress === this.req.me.emailAddress) {
      desiredEffectReEmail = 'cancelPendingChange';
    } else {
      desiredEffectReEmail = 'change';
    }


    // If the email address is changing, make sure it is not already being used.
    if (desiredEffectReEmail === 'change') {
      let conflictingUser = await User.findOne({
        or: [
          { emailAddress: inputs.emailAddress.toLowerCase() },
          { emailChangeCandidate: inputs.emailAddress.toLowerCase() }
        ]
      });
      if (conflictingUser) {
        throw 'emailAlreadyInUse';
      }
    }


    // Start building the values to set in the db.
    // (We always set the fullName if provided.)
    var valuesToSet = {
      fullName: inputs.fullName,
    };

    switch (desiredEffectReEmail) {

      // Change email
      case 'change':
        // TODO
        break;

      // Cancel pending email change
      case 'cancelPendingChange':
        // TODO
        break;

      // Otherwise, do nothing re: email
    }

    // Save to the db
    await User.update({id: this.req.me.id }).set(valuesToSet);


    // If an email address change was requested, and re-confirmation is required,
    // send the "confirm account" email.
    if (changeEmailAddress && sails.config.custom.verifyEmailAddresses) {
      await sails.helpers.sendTemplateEmail({
        to: newEmailAddress,
        subject: 'Your account has been updated',
        template: 'email-verify-new-email',
        templateData: {
          fullName: inputs.fullName,
          token: valuesToSet.emailProofToken
        }
      });
    }

    return exits.success();










    // // Determine whether the email address changed, or whether a pending change is being cancelled.
    // var changeEmailAddress;
    // var cancelPendingEmailChange;
    // // If the logged-in user doesn't have an `emailChangeCandidate`, and the email passed in
    // // does not match their current email address, then the email will be updated.
    // if (!this.req.me.emailChangeCandidate && inputs.emailAddress.toLowerCase() !== this.req.me.emailAddress) {
    //   changeEmailAddress = true;
    // }
    // // Otherwise, if the logged-in user has an `emailChangeCandidate` already, and the email address
    // // provided matches the user's current email address, then we are cancelling a pending change
    // // and NOT changing the email address.
    // else if (this.req.me.emailChangeCandidate && inputs.emailAddress.toLowerCase() === this.req.me.emailAddress) {
    //   cancelPendingEmailChange = true;
    // }
    // // Otherwise, if the logged-in user has an `emailChangeCandidate` already, and the email address
    // // provided does not match the current `emailChangeCandidate`, then the email will be updated.
    // else if (this.req.me.emailChangeCandidate && inputs.emailAddress.toLowerCase() !== this.req.me.emailChangeCandidate) {
    //   changeEmailAddress = true;
    // }
    // // Otherwise, the email will not be updated.
    // else {
    //   changeEmailAddress = false;
    // }

    // // If the email address is changing, make sure it is not already being used.
    // if (changeEmailAddress) {
    //   let conflictingUser = await User.findOne({
    //     or: [
    //       { emailAddress: inputs.emailAddress.toLowerCase() },
    //       { emailChangeCandidate: inputs.emailAddress.toLowerCase() }
    //     ]
    //   });
    //   if (conflictingUser) {
    //     throw 'emailAlreadyInUse';
    //   }
    // }

    // // Always update the user's name
    // var valuesToSet = {
    //   fullName: inputs.fullName
    // };

    // // If the email is being changed AND email verification is required,
    // // then update the record accordingly.  (Note that we don't bother with
    // // an `emailChangeCandidate` if this user didn't have their existing
    // // email verified yet-- we just change the unconfirmed email address.)
    // if (changeEmailAddress && sails.config.custom.verifyEmailAddresses) {
    //   valuesToSet.emailProofToken = await sails.stdlib('strings').random('url-friendly');
    //   valuesToSet.emailProofTokenExpiresAt = Date.now() + sails.config.custom.emailProofTokenTTL;
    //   if (this.req.me.emailStatus === 'unconfirmed') {
    //     valuesToSet.emailStatus = 'unconfirmed';
    //     valuesToSet.emailChangeCandidate = '';
    //     valuesToSet.emailAddress = inputs.emailAddress.toLowerCase();
    //   } else {
    //     valuesToSet.emailStatus = 'changeRequested';
    //     valuesToSet.emailChangeCandidate = inputs.emailAddress;
    //   }
    // } else if(cancelPendingEmailChange) {
    //   // Clear out the email change candidate.
    //   valuesToSet.emailChangeCandidate = '';
    //   // If the email status is 'changeRequested', we know the previous email address
    //   // was already confirmed.
    //   if(this.req.me.emailStatus === 'changeRequested') {
    //     valuesToSet.emailProofToken = '';
    //     valuesToSet.emailProofTokenExpiresAt = 0;
    //     valuesToSet.emailStatus = 'confirmed';
    //   }
    //   // Otherwise, the previous email address was not confirmed.
    //   else {
    //     valuesToSet.emailProofToken = await sails.stdlib('strings').random('url-friendly');
    //     valuesToSet.emailProofTokenExpiresAt = Date.now() + sails.config.custom.emailProofTokenTTL;
    //     valuesToSet.emailStatus = 'unconfirmed';
    //   }
    // }
    // // If the email is being changed and re-confirmation is NOT required, just update the email address.
    // else if(changeEmailAddress) {
    //   valuesToSet.emailAddress = inputs.emailAddress.toLowerCase();
    // }

    // await User.update({id: this.req.me.id }, valuesToSet);

    // // If an email address change was requested, and re-confirmation is required,
    // // send the "confirm account" email.
    // if (changeEmailAddress && sails.config.custom.verifyEmailAddresses) {
    //   await sails.helpers.sendTemplateEmail({
    //     to: inputs.emailAddress.toLowerCase(),
    //     subject: 'Your account has been updated',
    //     template: 'email-verify-new-email',
    //     templateData: {
    //       fullName: inputs.fullName,
    //       token: valuesToSet.emailProofToken
    //     }
    //   });
    // }

    // return exits.success();

  }


};
