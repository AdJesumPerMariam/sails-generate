module.exports = {


  friendlyName: 'Update password and login',


  description: '',


  inputs: {

    passwordResetToken: {
      description: 'The password token that was generated by the `sendPasswordRecoveryEmail` endpoint.',
      example: 'gwa8gs8hgw9h2g9hg29hgwh9asdgh9q34$$$$$asdgasdggds',
      required: true
    },

    password: {
      description: 'The new, unencrypted password.',
      example: 'abc123v2',
      required: true
    }

  },


  exits: {

    success: {
      statusCode: 200
    },

    invalidToken: {
      statusCode: 401,
      description: 'The provided password token is invalid, or has already been used.',
    }

  },


  fn: async function (inputs, exits) {

    // Look up the user with this reset token.
    var userRecord = await User.findOne({ passwordResetToken: inputs.passwordResetToken });

    // If there isn't one, the token is invalid.
    if(!userRecord) {
      return exits.invalidToken();
    }

    // Hash the new password.
    var hashed = await sails.stdlib('passwords').hashPassword({
      password: inputs.password
    });

    // Update the user's password, and clear out the reset token so it can't be used again.
    await User.update({ id: userRecord.id }).set({
      password: hashed,
      passwordResetToken: ''
    });

    // Log the user in.
    this.req.session.userId = userRecord.id;

    return exits.success();

  }


};
