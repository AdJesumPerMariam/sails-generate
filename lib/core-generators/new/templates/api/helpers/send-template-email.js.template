module.exports = {


  friendlyName: 'Send template email',


  description: 'Send an email using a template.',


  extendedDescription:
`To ease testing and development, if the provided "to" email address ends in "@example.com", then
the email message will be written to the terminal instead of actually being sent.  (Thanks
[@simonratner](https://github.com/simonratner)!)`,


  inputs: {

    template: {
      description: 'The relative path to an EJS template within our `views/emails/` folder -- WITHOUT the file extension.',
      extendedDescription:
`Use strings like "foo" or "foo/bar", but NEVER "foo/bar.ejs".  For example, "marketing/welcome" would send an email
using the "views/emails/marketing/welcome.ejs" template.`,
      example: 'reset-password',
      type: 'string',
      required: true
    },

    templateData: {
      description: 'A dictionary of data which will be accessible in the EJS template.',
      extendedDescription:
`Each key will be a local variable accessible in the template.  For instance, if you supply
a dictionary with a \`friends\` key, and \`friends\` is an array like \`[{name:"Chandra"}, {name:"Mary"}]\`),
then you will be able to access \`friends\` from the template:
\`\`\`
<ul><% for (friend of friends){ %>
  <li><%= friend.name %></li><% }); %></ul>
\`\`\`

This is EJS, so use \`<%= %>\` to inject the HTML-escaped content of a variable,
\`<%= %>\` to skip HTML-escaping and inject the data as-is, or \`<% %>\` to execute
some JavaScript code such as an \`if\` statement or \`for\` loop.`,
      type: {},
      defaultsTo: {}
    },

    to: {
      description: 'The email address of the primary recipient.',
      extendedDescription:
`If this is any email "@example.com", or if the hostname uses the ".example", ".test",
or ".silent" TLDs, then don't actually deliver the message.  Instead, log it to the
console.`,
      example: 'foo@bar.com',
      required: true
    },

    cc: {
      description: 'Array of email addresses to CC.',
      example: ['foo@bar.com']
    },

    bcc: {
      description: 'Array of email addresses to BCC.',
      example: ['foo@bar.com']
    },

    subject: {
      description: 'The subject of the email.',
      example: 'Hello there.',
      defaultsTo: ''
    }

  },


  exits: {

    success: {
      outputFriendlyName: 'Email delivery report',
      outputDescription: 'A dictionary of information about what went down.',
      outputType: {
        isDestinationEmailAddressConsideredFake: 'boolean'
      }
    }

  },


  fn: async function(inputs, exits) {

    var path = require('path');
    var url = require('url');
    var util = require('util');

    if (!_.startsWith(path.basename(inputs.template), 'email-')) {
      sails.log.warn(
        'The "template" that was passed in to `sendTemplateEmail()` does not begin with '+
        '"email-" -- but by convention, all email template files in `views/emails/` should '+
        'be namespaced in this way.  (This makes it easier to look up email templates by '+
        'filename; e.g. when using CMD/CTRL+P in Sublime Text.)\n'+
        'Continuing regardless...'
      );
    }


    var emailTemplatePath = path.join('emails/', inputs.template);

    var dynamicDataForTemplate = _.extend({

      // Disable layouts
      layout: false,

      // Provide access to `url` lib (for building links and image srcs, etc.)
      url: url,

      // Provide access to `util` lib (for dumping data in internal emails)
      util: util

    }, inputs.templateData);

    sails.renderView(emailTemplatePath, dynamicDataForTemplate, async function(err, htmlEmailContents) {
      if (err) { return exits.error(err); }

      try {

        // Skip .test and .example TLDs, as well as anything "@example.com".
        // (For example, a special-cased version of "user@example.com" is
        // used by Trend Micro Mars scanner to "check apks for malware".)
        var RX_FAKE_EMAIL = /\.(example|test|silent)$|@example\.com$/i;
        var isDestinationEmailAddressConsideredFake = inputs.to.match(RX_FAKE_EMAIL);

        if (sails.config.environment !== 'test' && !isDestinationEmailAddressConsideredFake) {
          await sails.stdlib('mailgun').sendHtmlEmail({
            htmlMessage: htmlEmailContents,
            toEmail: inputs.to,
            subject: inputs.subject,
            fromEmail: sails.config.custom.fromEmailAddress,
            fromName: sails.config.custom.fromName,
            testMode: false
          });
        }
        else {
          // Unless the "to" doesn't end in `.silent`, log info about the email that
          // WOULD have been sent to the console.
          if (!inputs.to.match(/\.silent$/)) {
            sails.log();
            sails.log('Skipped sending email, either because the current sails environment');
            sails.log('is set to "test", or because the destination email address ended in');
            sails.log('`.test`, `.example`, or was an email at `example.com`.');
            sails.log('But here is what WOULD have been sent:');
            sails.log('-=-=-=-=-=-=-=-=-=-=-=-=-= Email log =-=-=-=-=-=-=-=-=-=-=-=-=-');
            sails.log();
            sails.log('To:', inputs.to);
            sails.log('Subject:', inputs.subject);
            sails.log();
            sails.log(htmlEmailContents);
            sails.log();
            sails.log('-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-');
          }
        }//ﬁ

        // All done!  (Send back report.)
        return exits.success({
          isDestinationEmailAddressConsideredFake: isDestinationEmailAddressConsideredFake
        });

      } catch (err) { return exits.error(err); }

    });//_∏_

  }

};
